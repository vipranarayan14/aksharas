{"mappings":"AEAA;IACE,OAAO,YAAY;IACnB,MAAM,WAAW;IACjB,UAAU,eAAe;IACzB,OAAO,YAAY;IACnB,YAAY,iBAAiB;CAC9B;AAED,uBAA8B,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAElD;IACE,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC;IACzB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;IACvB,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;IACtB,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC;IACpB,QAAQ,CAAC,UAAU,CAAC,EAAE,eAAe,CAAC;gBAGpC,IAAI,EAAE,SAAS,EACf,KAAK,EAAE,MAAM,EACb,GAAG,EAAE,MAAM,EACX,UAAU,CAAC,EAAE,eAAe;CAW/B;;;;ACoJD,wBAA4B","sources":["src/src/deva-char-types.ts","src/src/char.ts","src/src/token.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,"import { Char } from \"./char\";\nimport { Token, TokenAttributes, TokenType } from \"./token\";\n\nenum State {\n  Initial,\n  Vowel,\n  Consonant,\n  ConjunctConsonant,\n}\n\nconst tokenize = (input: string): Token[] => {\n  const tokens: Token[] = [];\n\n  let pos = 0;\n  let acc = \"\";\n  let varnasLength: number = 0;\n  let state = State.Initial;\n\n  const resetVariables = () => {\n    pos = 0;\n    acc = \"\";\n    varnasLength = 0;\n    state = State.Initial;\n  };\n\n  const createToken = (tokenType: TokenType, attributes?: TokenAttributes) => {\n    tokens.push(new Token(tokenType, acc, pos, attributes));\n    resetVariables();\n  };\n\n  for (let i = 0, l = input.length; i < l; i += 1) {\n    const char = new Char(input[i]);\n\n    const nextChar = new Char(input[i + 1]);\n\n    acc += char.value;\n\n    switch (state) {\n      case State.Initial: {\n        pos = i;\n\n        if (char.isSymbol()) {\n          createToken(TokenType.Symbol);\n          break;\n        }\n\n        if (char.isWhitespace()) {\n          createToken(TokenType.Whitespace);\n          break;\n        }\n\n        if (char.isUnrecognised()) {\n          createToken(TokenType.Unrecognised);\n          break;\n        }\n\n        if (char.isVowel()) {\n          if (nextChar.isVowelAttachment()) {\n            state = State.Vowel;\n            break;\n          }\n\n          createToken(TokenType.Akshara, { varnasLength: 1 });\n          break;\n        }\n\n        if (char.isConsonant()) {\n          if (nextChar.isNukta() || nextChar.isConsonantAttachment()) {\n            varnasLength += 1;\n            state = State.Consonant;\n            break;\n          }\n\n          createToken(TokenType.Akshara, { varnasLength: 2 });\n          break;\n        }\n\n        createToken(TokenType.Invalid);\n        break;\n      }\n\n      case State.Vowel: {\n        if (char.isAccent()) {\n          createToken(TokenType.Akshara, { varnasLength: 1 });\n          break;\n        }\n\n        if (char.isYogavaha()) {\n          if (nextChar.isAccent()) {\n            break;\n          }\n\n          createToken(TokenType.Akshara, { varnasLength: 1 });\n          break;\n        }\n\n        break;\n      }\n\n      case State.Consonant: {\n        if (char.isNukta()) {\n          if (nextChar.isConsonantAttachment()) {\n            break;\n          }\n\n          createToken(TokenType.Akshara, { varnasLength: 2 });\n          break;\n        }\n\n        if (char.isVirama()) {\n          if (nextChar.isJoiner()) {\n            break;\n          }\n\n          if (nextChar.isConsonant()) {\n            state = State.ConjunctConsonant;\n            break;\n          }\n\n          createToken(TokenType.Akshara, { varnasLength });\n          break;\n        }\n\n        if (char.isJoiner()) {\n          if (nextChar.isJoiner()) {\n            break;\n          }\n\n          if (nextChar.isConsonant()) {\n            state = State.ConjunctConsonant;\n            break;\n          }\n\n          createToken(TokenType.Akshara, { varnasLength });\n          break;\n        }\n\n        if (char.isVowelMarkAttachment()) {\n          varnasLength += 1;\n\n          if (nextChar.isAccent()) {\n            break;\n          }\n\n          createToken(TokenType.Akshara, { varnasLength });\n          break;\n        }\n\n        if (char.isVowelMark()) {\n          if (nextChar.isVowelMarkAttachment()) {\n            break;\n          }\n\n          varnasLength += 1;\n          createToken(TokenType.Akshara, { varnasLength });\n          break;\n        }\n      }\n\n      case State.ConjunctConsonant: {\n        if (nextChar.isNukta() || nextChar.isConsonantAttachment()) {\n          varnasLength += 1;\n          state = State.Consonant;\n          break;\n        }\n\n        varnasLength += 2;\n        createToken(TokenType.Akshara, { varnasLength });\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  return tokens;\n};\n\nexport default { tokenize };\n"],"names":[],"version":3,"file":"index.d.ts.map"}