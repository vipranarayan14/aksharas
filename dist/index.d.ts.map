{"mappings":"AAAA;IACE,OAAO,YAAY;IACnB,MAAM,WAAW;IACjB,UAAU,eAAe;IACzB,OAAO,YAAY;IACnB,YAAY,iBAAiB;CAC9B;AAED,uBAA8B,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAElD;IACE,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC;IACzB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;IACvB,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;IACtB,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC;IACpB,QAAQ,CAAC,UAAU,CAAC,EAAE,eAAe,CAAC;gBAGpC,IAAI,EAAE,SAAS,EACf,KAAK,EAAE,MAAM,EACb,GAAG,EAAE,MAAM,EACX,UAAU,CAAC,EAAE,eAAe;CAW/B;AI7BD,eAAe;IACb,GAAG,EAAE,KAAK,EAAE,CAAC;IACb,QAAQ,EAAE,KAAK,EAAE,CAAC;IAElB,OAAO,EAAE,KAAK,EAAE,CAAC;IACjB,WAAW,EAAE,KAAK,EAAE,CAAC;IACrB,KAAK,EAAE,MAAM,EAAE,CAAC;IAChB,OAAO,EAAE,KAAK,EAAE,CAAC;IACjB,YAAY,EAAE,KAAK,EAAE,CAAC;IACtB,YAAY,EAAE,MAAM,CAA0B;CAC/C,CAAC;AA4CF,QAAA,MAAM,QAAQ;qBAhCU,MAAM,KAAG,OAAO;CAkCvC,CAAC;AAEF,eAAe,QAAQ,CAAC","sources":["src/src/token.ts","src/src/deva-char-types.ts","src/src/char.ts","src/src/tokenize.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,"import { Token, TokenType } from \"./token\";\nimport { tokenize } from \"./tokenize\";\n\ntype Results = {\n  all: Token[];\n  aksharas: Token[];\n  //   varnas: Token[] /* Yet to be implemented */;\n  symbols: Token[];\n  whitespaces: Token[];\n  chars: string[];\n  invalid: Token[];\n  unrecognised: Token[];\n  varnasLength: number /* Will be deprecated */;\n};\n\nconst calcTotalVarnasLength = (tokens: Token[]) =>\n  tokens.reduce(\n    (total, akshara) =>\n      akshara.attributes ? total + akshara.attributes.varnasLength : total,\n    0\n  );\n\nconst filterTokens = (tokens: Token[], tokenType: TokenType) =>\n  tokens.filter((token) => token.type === tokenType);\n\nconst analyse = (input: string): Results => {\n  const tokens = tokenize(input);\n\n  const aksharas = filterTokens(tokens, TokenType.Akshara);\n\n  //   const varnas = [];\n\n  const chars = input.split(\"\");\n\n  const symbols = filterTokens(tokens, TokenType.Symbol);\n\n  const invalidChars = filterTokens(tokens, TokenType.Invalid);\n\n  const whitespaces = filterTokens(tokens, TokenType.Whitespace);\n\n  const unrecognisedChars = filterTokens(tokens, TokenType.Unrecognised);\n\n  const varnasLength = calcTotalVarnasLength(aksharas);\n\n  return {\n    all: tokens,\n    aksharas: aksharas,\n    // varnas: varnas,\n    chars: chars,\n    symbols: symbols,\n    invalid: invalidChars,\n    whitespaces: whitespaces,\n    unrecognised: unrecognisedChars,\n    varnasLength: varnasLength,\n  };\n};\n\nconst Aksharas = {\n  analyse,\n};\n\nexport default Aksharas;\n"],"names":[],"version":3,"file":"index.d.ts.map"}